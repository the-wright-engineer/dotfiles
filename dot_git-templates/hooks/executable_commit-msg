#!/usr/bin/env python3

import re
import subprocess
import sys

# Collect the parameters
COMMIT_MSG_FILEPATH = sys.argv[1]
if len(sys.argv) > 2:
    COMMIT_TYPE = sys.argv[2]
else:
    COMMIT_TYPE = ""
if len(sys.argv) > 3:
    COMMIT_HASH = sys.argv[3]
else:
    COMMIT_HASH = ""

# print(
#     f"commit-msg: "
#     f"File: {COMMIT_MSG_FILEPATH}\n"
#     f"Type: {COMMIT_TYPE}\n"
#     f"Hash: {COMMIT_HASH}"
# )

print("commit-msg: starting.")

# Figure out which branch we're on
try:
    output = subprocess.check_output(
        ["git", "symbolic-ref", "--short", "HEAD"])
    branch = output.strip()
except subprocess.CalledProcessError:
    # Not all git processes will be able to run the subprocess step above
    # an example is lazygit's rebasing process.
    # Therefore, we gracefully exit with a message.
    print("commit-msg: unable to execute git symbolic-ref command.")
    sys.exit(0)

# Extract Jira ticket details from the branch name
# https://stackoverflow.com/a/73914895
ticket = re.search(r"\b[A-Z][A-Z0-9_]+-[1-9][0-9]*", branch.decode("utf-8"))

if ticket is None:
    # Not every project will have a Jira ticket associated with it.
    # So we gracefully exit with a message.
    print("commit-msg: unable to extract Jira ticket from branch name.")
else:
    # Populate the commit message with the ticket #, if there is one
    with open(COMMIT_MSG_FILEPATH, "r", encoding="utf-8") as f:
        # check the commit message for ticket #
        commit_message_line = f.readline()
        commit_content = f.read()
        # Check if the commit message contains the ticket #
        if f"{ticket.group()}" not in commit_message_line:
            raise Exception(f"commit-msg: the commit message must contain {ticket.group()}")
        else:
            print("commit-msg: committing.")
        print("commit-msg: done.")
